# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyitwom3', [dirname(__file__)])
        except ImportError:
            import _pyitwom3
            return _pyitwom3
        if fp is not None:
            try:
                _mod = imp.load_module('_pyitwom3', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyitwom3 = swig_import_helper()
    del swig_import_helper
else:
    import _pyitwom3
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _pyitwom3.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyitwom3.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _pyitwom3.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyitwom3.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _pyitwom3.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyitwom3.doubleArray_frompointer
    if _newclass:
        frompointer = staticmethod(_pyitwom3.doubleArray_frompointer)
doubleArray_swigregister = _pyitwom3.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _pyitwom3.doubleArray_frompointer(t)
doubleArray_frompointer = _pyitwom3.doubleArray_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyitwom3.new_doublep()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyitwom3.delete_doublep
    __del__ = lambda self: None

    def assign(self, value):
        return _pyitwom3.doublep_assign(self, value)

    def value(self):
        return _pyitwom3.doublep_value(self)

    def cast(self):
        return _pyitwom3.doublep_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyitwom3.doublep_frompointer
    if _newclass:
        frompointer = staticmethod(_pyitwom3.doublep_frompointer)
doublep_swigregister = _pyitwom3.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(t):
    return _pyitwom3.doublep_frompointer(t)
doublep_frompointer = _pyitwom3.doublep_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyitwom3.new_intp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyitwom3.delete_intp
    __del__ = lambda self: None

    def assign(self, value):
        return _pyitwom3.intp_assign(self, value)

    def value(self):
        return _pyitwom3.intp_value(self)

    def cast(self):
        return _pyitwom3.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _pyitwom3.intp_frompointer
    if _newclass:
        frompointer = staticmethod(_pyitwom3.intp_frompointer)
intp_swigregister = _pyitwom3.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t):
    return _pyitwom3.intp_frompointer(t)
intp_frompointer = _pyitwom3.intp_frompointer


def point_to_point_ITM(elev, tht_m, rht_m, eps_dielect, sgm_conductivity, eno_ns_surfref, frq_mhz, radio_climate, pol, conf, rel, dbloss, errnum):
    return _pyitwom3.point_to_point_ITM(elev, tht_m, rht_m, eps_dielect, sgm_conductivity, eno_ns_surfref, frq_mhz, radio_climate, pol, conf, rel, dbloss, errnum)
point_to_point_ITM = _pyitwom3.point_to_point_ITM

def point_to_point(elev, tht_m, rht_m, eps_dielect, sgm_conductivity, eno_ns_surfref, frq_mhz, radio_climate, pol, conf, rel, dbloss, errnum):
    return _pyitwom3.point_to_point(elev, tht_m, rht_m, eps_dielect, sgm_conductivity, eno_ns_surfref, frq_mhz, radio_climate, pol, conf, rel, dbloss, errnum)
point_to_point = _pyitwom3.point_to_point

def point_to_pointMDH_two(elev, tht_m, rht_m, eps_dielect, sgm_conductivity, eno_ns_surfref, enc_ncc_clcref, clutter_height, clutter_density, delta_h_diff, frq_mhz, radio_climate, pol, mode_var, timepct, locpct, confpct, dbloss, propmode, deltaH, errnum):
    return _pyitwom3.point_to_pointMDH_two(elev, tht_m, rht_m, eps_dielect, sgm_conductivity, eno_ns_surfref, enc_ncc_clcref, clutter_height, clutter_density, delta_h_diff, frq_mhz, radio_climate, pol, mode_var, timepct, locpct, confpct, dbloss, propmode, deltaH, errnum)
point_to_pointMDH_two = _pyitwom3.point_to_pointMDH_two

def point_to_pointDH(elev, tht_m, rht_m, eps_dielect, sgm_conductivity, eno_ns_surfref, enc_ncc_clcref, clutter_height, clutter_density, delta_h_diff, frq_mhz, radio_climate, pol, conf, rel, loc, dbloss, deltaH, errnum):
    return _pyitwom3.point_to_pointDH(elev, tht_m, rht_m, eps_dielect, sgm_conductivity, eno_ns_surfref, enc_ncc_clcref, clutter_height, clutter_density, delta_h_diff, frq_mhz, radio_climate, pol, conf, rel, loc, dbloss, deltaH, errnum)
point_to_pointDH = _pyitwom3.point_to_pointDH

def ITWOMVersion():
    return _pyitwom3.ITWOMVersion()
ITWOMVersion = _pyitwom3.ITWOMVersion
# This file is compatible with both classic and new-style classes.


